#include <iostream>
using namespace std;
#include "mbed.h"
#include "BNO055.hpp"
#include "motor.hpp"
#include "PID.hpp"
#include "rotaryinc.hpp"
#include "SBDBT.hpp"
#define kp 0.0001
#define ki 0.00000001//0.00000001  iゲインは正直あんまり関係ないかも?
#define kd 0.00000001//0.00000001
#define dt 0.01
#define diameter 101.6//直径
#define resolution 256.0//分解能
#define coefficient 0.20//右スティックで旋回するときの係数
#define stick_n 64.0//スティックに触れてないときの値

int main()
{
    sbdbt sbd(PA_0,PA_1);       
    Motor mot[4] = {
    Motor(PB_8,PB_9),
    Motor(PB_6,PB_7),
    Motor(PB_4,PB_5),
    Motor(PC_8,PC_9)
    };

    PID pid[4] = {
        PID(kp,ki,kd,dt),
        PID(kp,ki,kd,dt),
        PID(kp,ki,kd,dt),
        PID(kp,ki,kd,dt)
    };

    rotaryinc rot[4] = {
    rotaryinc(PC_5,PA_12,diameter,resolution,dt),
    rotaryinc(PC_1,PC_0,diameter,resolution,dt),
    rotaryinc(PA_9,PA_8,diameter,resolution,dt),
    rotaryinc(PA_7,PA_6,diameter,resolution,dt)
    };
    //---変数
    
    double tar[4] = {0.0};
    double speed[4] = {0.0};
    double vx = 0.0;
    double vy = 0.0;
    double vx_tar_limit = 10.0;
    double vy_tar_limit = 10.0;

    while(1) 
    {
        
        //---モーターのスピードを取得
            for(int i = 0; i < 4; i++)
            {
                speed[i] = rot[i].getspeed();
            }

        //---x,y方向の最大値決め

            vx = (vx_tar_limit / stick_n) * (sbd.lsx() - stick_n);                        
            vy = (vy_tar_limit / stick_n) * (sbd.lsy() - stick_n); 



        //---消すかもしれない
        //---倒せば倒すほど足される数字が大きくなるはず
            if(vx > 0.0){ vx *= (sbd.lsx() - 64) * (vx_tar_limit / stick_n) / 7.5;}
            if(vy > 0.0){vy *= (sbd.lsy() - 64) * (vy_tar_limit / stick_n) / 7.5;}
            if(vx < 0.0){vx *= -(sbd.lsx() - 64) * (vx_tar_limit / stick_n) / 7.5;}
            if(vy <0.0){vy *= -(sbd.lsy() - 64) * (vy_tar_limit / stick_n) / 7.5;}
        


        //---目標値決め
            tar[0] =  vx * cos(M_PI/4) + vy * sin(M_PI/4) + coefficient * (sbd.rsx() - stick_n);
            tar[1] = -vx * sin(M_PI/4) + vy * cos(M_PI/4) + coefficient * (sbd.rsx() - stick_n);
            tar[2] = -vx * cos(M_PI/4) - vy * sin(M_PI/4) + coefficient * (sbd.rsx() - stick_n);
            tar[3] =  vx * sin(M_PI/4) - vy * cos(M_PI/4) + coefficient * (sbd.rsx() - stick_n);    
            
       
           
        //---ボタンでの旋回

            if(sbd.r2())
            {
            tar[0] = 10;
            tar[1] = 10;
            tar[2] = 10;
            tar[3] = 10;
            }
            if(sbd.l2())
            {
            tar[0] = -10;
            tar[1] = -10;
            tar[2] = -10;
            tar[3] = -10;
            }
            if(sbd.neutral())
            {
            tar[0] = 0.0;
            tar[1] = 0.0;
            tar[2] = 0.0;
            tar[3] = 0.0;
            }
            
        //---出力

             for(int i = 0; i < 4; i++) 
             {
             pid[i].set(speed[i],tar[i]);    
             pid[i].safety(0.6,-0.6);
             mot[i].revolution(pid[i].pwm); 
             }
    }
}
